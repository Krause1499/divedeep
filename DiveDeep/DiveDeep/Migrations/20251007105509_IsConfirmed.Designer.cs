// <auto-generated />
using System;
using DiveDeep.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiveDeep.Migrations
{
    [DbContext(typeof(DiveDeepContext))]
    [Migration("20251007105509_IsConfirmed")]
    partial class IsConfirmed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DiveDeep.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DiveDeep.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DiveDeep.Models.OrderItem", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Octopus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("ProductType")
                        .HasColumnType("int");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<string>("StageOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StageTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<double?>("Thickness")
                        .HasColumnType("float");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("Volume")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("DiveDeep.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DailyPrice")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Scubapro",
                            DailyPrice = 125,
                            FilePath = "https://scubadirect.dk/cdn/shop/files/SP_21770X00_Navigator_Lite_BLK_Left34-View.webp?v=1747051445",
                            ProductType = "BCD"
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Scubapro",
                            DailyPrice = 140,
                            FilePath = "https://shop11921.sfstatic.io/upload_dir/shop/_thumbs/scubapro-bcd-glide-1.w1200.jpg",
                            ProductType = "BCD"
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Scubapro",
                            DailyPrice = 200,
                            FilePath = "https://dykker-butikken.dk/cdn/shop/files/scubapro-hydros-pro-m_nd-3.jpg?v=1730217105",
                            ProductType = "BCD"
                        },
                        new
                        {
                            Id = 4,
                            Brand = "Seac",
                            DailyPrice = 145,
                            FilePath = "https://shop11921.sfstatic.io/upload_dir/shop/_thumbs/seac-bcd-modular-one-size-1.w610.h610.fill.jpg",
                            ProductType = "BCD"
                        },
                        new
                        {
                            Id = 30,
                            Brand = "Scubapro",
                            DailyPrice = 100,
                            FilePath = "https://scubadirect.dk/cdn/shop/products/DEFINITION-STMR-3MM-B-ZIP-MAN-63.930.X.jpg?v=1656951438",
                            ProductType = "DivingSuit"
                        },
                        new
                        {
                            Id = 31,
                            Brand = "Scubapro",
                            DailyPrice = 100,
                            FilePath = "https://shop11921.sfstatic.io/upload_dir/shop/definition-stmr-5mm-b-zip-man-63.932.x.png",
                            ProductType = "DivingSuit"
                        },
                        new
                        {
                            Id = 32,
                            Brand = "Scubapro",
                            DailyPrice = 100,
                            FilePath = "https://aquaholics.co.uk/cdn/shop/products/scubapro-definition-7mm-woman.jpg?v=1541519476",
                            ProductType = "DivingSuit"
                        },
                        new
                        {
                            Id = 33,
                            Brand = "Waterproof",
                            DailyPrice = 100,
                            FilePath = "https://www.mikesdivestore.com/cdn/shop/products/W7_male_new_9cbb2496-b304-4daa-ad92-fc0dc822eb51.jpg?v=1672042321&width=1214",
                            ProductType = "DivingSuit"
                        },
                        new
                        {
                            Id = 5,
                            Brand = "Fourth Element",
                            DailyPrice = 120,
                            FilePath = "https://jettydive.com.au/wp-content/uploads/2022/02/PROTEUS-II-e1492122864772.jpg",
                            ProductType = "DivingSuit"
                        },
                        new
                        {
                            Id = 6,
                            Brand = "Scubapro",
                            DailyPrice = 300,
                            FilePath = "https://shop11921.sfstatic.io/upload_dir/shop/_thumbs/EXODRY_4_MN_60.853.000.w1200.jpg",
                            ProductType = "DivingSuit"
                        },
                        new
                        {
                            Id = 7,
                            Brand = "Waterproof",
                            DailyPrice = 320,
                            FilePath = "https://www.sublub.nl/resize/waterproofd7-evo_10013765071715.png/0/1100/True/waterproof-d7-evo-drysuit-men-size-l-plus.png",
                            ProductType = "DivingSuit"
                        },
                        new
                        {
                            Id = 8,
                            Brand = "Santi",
                            DailyPrice = 350,
                            FilePath = "https://shop11921.sfstatic.io/upload_dir/shop/elite-plus_01-kolor.jpg",
                            ProductType = "DivingSuit"
                        },
                        new
                        {
                            Id = 9,
                            Brand = "Scubapro",
                            DailyPrice = 125,
                            FilePath = "https://johnsonoutdoors.widen.net/content/rpvygpvdbi/jpeg/SP_12971965_MKEVODIN_S600_R105.jpg",
                            ProductType = "Regulator"
                        },
                        new
                        {
                            Id = 10,
                            Brand = "Scubapro",
                            DailyPrice = 100,
                            FilePath = "https://shop11921.sfstatic.io/upload_dir/shop/MK17Evo_C370_R095_DIN.webp",
                            ProductType = "Regulator"
                        },
                        new
                        {
                            Id = 11,
                            Brand = "Scubapro",
                            DailyPrice = 150,
                            FilePath = "https://shop11921.sfstatic.io/upload_dir/shop/_thumbs/mk25-bt-a700carbon-s270.w1200.jpg",
                            ProductType = "Regulator"
                        },
                        new
                        {
                            Id = 12,
                            Brand = "Scubapro",
                            DailyPrice = 150,
                            FilePath = "https://shop11921.sfstatic.io/upload_dir/shop/_thumbs/n_p1eee6v6q25m2120k16duojq6774-2.w1200.jpg",
                            ProductType = "OxygenTank"
                        },
                        new
                        {
                            Id = 13,
                            Brand = "Scubapro",
                            DailyPrice = 160,
                            FilePath = "https://scubadirect.dk/cdn/shop/products/Flaske1udtag-p.jpg?v=1617200377",
                            ProductType = "OxygenTank"
                        },
                        new
                        {
                            Id = 14,
                            Brand = "Scubapro",
                            DailyPrice = 170,
                            FilePath = "https://shop11921.sfstatic.io/upload_dir/shop/_thumbs/18-012-121.w1200.jpg",
                            ProductType = "OxygenTank"
                        },
                        new
                        {
                            Id = 15,
                            Brand = "Scubapro",
                            DailyPrice = 180,
                            FilePath = "https://www.edyk.dk/cdn/shop/products/Dykkerflaske15Liter.jpg?v=1666609081",
                            ProductType = "OxygenTank"
                        },
                        new
                        {
                            Id = 16,
                            Brand = "Scubapro",
                            DailyPrice = 50,
                            FilePath = "https://aquashoppen.dk/files/products/S-25365400.jpg",
                            ProductType = "Fins"
                        },
                        new
                        {
                            Id = 17,
                            Brand = "Scubapro",
                            DailyPrice = 50,
                            FilePath = "https://www.kingfish.dk/media/catalog/product/cache/c1c0e1fb1ecf4dd56138fa5b5577c9ad/s/c/scubapro-go-travel-finner-dykning-2-2.jpg",
                            ProductType = "Fins"
                        },
                        new
                        {
                            Id = 18,
                            Brand = "Scubapro",
                            DailyPrice = 60,
                            FilePath = "https://shop11921.sfstatic.io/upload_dir/shop/SP_25505X00_Seawing_Supernova_2.jpg",
                            ProductType = "Fins"
                        },
                        new
                        {
                            Id = 19,
                            Brand = "Seac",
                            DailyPrice = 50,
                            FilePath = "https://shop11921.sfstatic.io/upload_dir/shop/seac-finne-propulsion-s-hvid-1.jpg",
                            ProductType = "Fins"
                        },
                        new
                        {
                            Id = 20,
                            Brand = "Seac",
                            DailyPrice = 50,
                            FilePath = "https://www.kids-world.dk/images/YP436.jpg",
                            ProductType = "Fins"
                        },
                        new
                        {
                            Id = 21,
                            Brand = "Fourth Element",
                            DailyPrice = 75,
                            FilePath = "https://www.onlinedivegear.com.au/cdn/shop/products/Fourth-Element-Tech-Fins-Grey_500x.jpg?v=1655305970",
                            ProductType = "Fins"
                        },
                        new
                        {
                            Id = 22,
                            Brand = "Fourth Element",
                            DailyPrice = 80,
                            FilePath = "https://shop11921.sfstatic.io/upload_dir/shop/fnrec02.jpg",
                            ProductType = "Fins"
                        },
                        new
                        {
                            Id = 23,
                            Brand = "Scubapro",
                            DailyPrice = 50,
                            FilePath = "https://m.media-amazon.com/images/I/519C84G2uYL._UF1000,1000_QL80_.jpg",
                            ProductType = "Snorkel"
                        },
                        new
                        {
                            Id = 24,
                            Brand = "Scubapro",
                            DailyPrice = 60,
                            FilePath = "https://scubadirect.dk/cdn/shop/products/24.250.200-p.jpg?v=1616663057&width=360",
                            ProductType = "Snorkel"
                        },
                        new
                        {
                            Id = 25,
                            Brand = "Scubapro",
                            DailyPrice = 50,
                            FilePath = "https://shop11921.sfstatic.io/upload_dir/shop/scubapro-spectra-mini-sort-soelv.jpg",
                            ProductType = "Snorkel"
                        },
                        new
                        {
                            Id = 26,
                            Brand = "Scubapro",
                            DailyPrice = 75,
                            FilePath = "https://www.edyk.dk/cdn/shop/products/Scubapro-Crystal-VU-dykkermaske-sort-s_C3_B8lv-p.jpg?v=1684326130&width=1080",
                            ProductType = "Snorkel"
                        },
                        new
                        {
                            Id = 27,
                            Brand = "Scubapro",
                            DailyPrice = 75,
                            FilePath = "https://shop11921.sfstatic.io/upload_dir/shop/_thumbs/dykkermaske-fourth-element-scout-sort-enhance-1-1.w1200.jpg",
                            ProductType = "Snorkel"
                        },
                        new
                        {
                            Id = 28,
                            Brand = "Scubapro",
                            DailyPrice = 75,
                            FilePath = "https://shop11921.sfstatic.io/upload_dir/shop/_thumbs/dykkermaske-fourth-element-scout-sort-kontrast-1-1.w610.h610.fill.jpg",
                            ProductType = "Snorkel"
                        },
                        new
                        {
                            Id = 29,
                            Brand = "Scubapro",
                            DailyPrice = 75,
                            FilePath = "https://scubaevolution.co.za/cdn/shop/files/SP_24108100_Steel_Comp_Mask_1.webp?v=1747029931",
                            ProductType = "Snorkel"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DiveDeep.Models.Order", b =>
                {
                    b.HasOne("DiveDeep.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiveDeep.Models.OrderItem", b =>
                {
                    b.HasOne("DiveDeep.Models.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DiveDeep.Models.Product", b =>
                {
                    b.OwnsOne("DiveDeep.Models.BCDSpecs", "BCD", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("int");

                            b1.Property<string>("Model")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Sizes")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProductId");

                            b1.ToTable("BCDSpecs", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.HasData(
                                new
                                {
                                    ProductId = 1,
                                    Model = "Navigator Lite BCD",
                                    Sizes = "S,M,L"
                                },
                                new
                                {
                                    ProductId = 2,
                                    Model = "BCD Glide",
                                    Sizes = "S,M,L"
                                },
                                new
                                {
                                    ProductId = 3,
                                    Model = "BCD Hydros Pro",
                                    Sizes = "S,M,L"
                                },
                                new
                                {
                                    ProductId = 4,
                                    Model = "BCD Modular",
                                    Sizes = "S,M,L"
                                });
                        });

                    b.OwnsOne("DiveDeep.Models.DivingSuitSpecs", "DivingSuit", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("int");

                            b1.Property<string>("Genders")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Model")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Sizes")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SuitType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double?>("ThicknessInMm")
                                .HasColumnType("float");

                            b1.HasKey("ProductId");

                            b1.ToTable("DivingSuitSpecs", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.HasData(
                                new
                                {
                                    ProductId = 30,
                                    Genders = "Herre,Dame",
                                    Model = "Definition",
                                    Sizes = "XS,S,M,L,XL",
                                    SuitType = "Våddragt",
                                    ThicknessInMm = 3.0
                                },
                                new
                                {
                                    ProductId = 31,
                                    Genders = "Herre,Dame",
                                    Model = "Definition",
                                    Sizes = "XS,S,M,L,XL",
                                    SuitType = "Våddragt",
                                    ThicknessInMm = 5.0
                                },
                                new
                                {
                                    ProductId = 32,
                                    Genders = "Herre,Dame",
                                    Model = "Definition",
                                    Sizes = "XS,S,M,L,XL",
                                    SuitType = "Våddragt",
                                    ThicknessInMm = 7.0
                                },
                                new
                                {
                                    ProductId = 33,
                                    Genders = "Herre,Dame",
                                    Model = "W5",
                                    Sizes = "XS,S,M,L,XL",
                                    SuitType = "Våddragt",
                                    ThicknessInMm = 3.5
                                },
                                new
                                {
                                    ProductId = 5,
                                    Genders = "Herre,Dame",
                                    Model = "Proteus",
                                    Sizes = "XS,S,M,L,XL",
                                    SuitType = "Våddragt",
                                    ThicknessInMm = 5.0
                                },
                                new
                                {
                                    ProductId = 6,
                                    Genders = "Herre,Dame",
                                    Model = "Exodry 4.0",
                                    Sizes = "XS,S,M,L,XL",
                                    SuitType = "Tørdragt"
                                },
                                new
                                {
                                    ProductId = 7,
                                    Genders = "Herre,Dame",
                                    Model = "D7 Evo",
                                    Sizes = "XS,S,M,L,XL",
                                    SuitType = "Tørdragt"
                                },
                                new
                                {
                                    ProductId = 8,
                                    Genders = "Herre,Dame",
                                    Model = "E.Lite Plus",
                                    Sizes = "XS,S,M,L,XL",
                                    SuitType = "Tørdragt"
                                });
                        });

                    b.OwnsOne("DiveDeep.Models.FinsSpecs", "Fins", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("int");

                            b1.Property<string>("Model")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Sizes")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProductId");

                            b1.ToTable("FinsSpecs", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.HasData(
                                new
                                {
                                    ProductId = 16,
                                    Model = "Jet Fin",
                                    Sizes = "XS,S,M,L,XL"
                                },
                                new
                                {
                                    ProductId = 17,
                                    Model = "GO Travel",
                                    Sizes = "XS,S,M,L,XL"
                                },
                                new
                                {
                                    ProductId = 18,
                                    Model = "Seawing Supernova",
                                    Sizes = "XS,S,M,L,XL"
                                },
                                new
                                {
                                    ProductId = 19,
                                    Model = "Propulsion",
                                    Sizes = "XS,S,M,L,XL"
                                },
                                new
                                {
                                    ProductId = 20,
                                    Model = "ALA",
                                    Sizes = "XS,S,M,L,XL"
                                },
                                new
                                {
                                    ProductId = 21,
                                    Model = "Tech",
                                    Sizes = "XS,S,M,L,XL"
                                },
                                new
                                {
                                    ProductId = 22,
                                    Model = "Rec Fin",
                                    Sizes = "XS,S,M,L,XL"
                                });
                        });

                    b.OwnsOne("DiveDeep.Models.MaskSnorkelSpecs", "MaskSnorkel", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("int");

                            b1.Property<string>("Model")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProductId");

                            b1.ToTable("MaskSnorkelSpecs", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.HasData(
                                new
                                {
                                    ProductId = 23,
                                    Model = "Ghost"
                                },
                                new
                                {
                                    ProductId = 24,
                                    Model = "D-Mask"
                                },
                                new
                                {
                                    ProductId = 25,
                                    Model = "Spectra Mini"
                                },
                                new
                                {
                                    ProductId = 26,
                                    Model = "Crystal VU"
                                },
                                new
                                {
                                    ProductId = 27,
                                    Model = "Scout Kontrast"
                                },
                                new
                                {
                                    ProductId = 28,
                                    Model = "Scout Enhance"
                                },
                                new
                                {
                                    ProductId = 29,
                                    Model = "Element"
                                });
                        });

                    b.OwnsOne("DiveDeep.Models.OxygenTankSpecs", "OxygenTank", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("int");

                            b1.Property<int?>("VolumeInL")
                                .HasColumnType("int");

                            b1.HasKey("ProductId");

                            b1.ToTable("OxygenTankSpecs", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.HasData(
                                new
                                {
                                    ProductId = 12,
                                    VolumeInL = 5
                                },
                                new
                                {
                                    ProductId = 13,
                                    VolumeInL = 10
                                },
                                new
                                {
                                    ProductId = 14,
                                    VolumeInL = 12
                                },
                                new
                                {
                                    ProductId = 15,
                                    VolumeInL = 15
                                });
                        });

                    b.OwnsOne("DiveDeep.Models.RegulatorSpecs", "Regulator", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("int");

                            b1.Property<string>("Octopus")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("StageOne")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("StageTwo")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProductId");

                            b1.ToTable("RegulatorSpecs", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.HasData(
                                new
                                {
                                    ProductId = 9,
                                    Octopus = "R105",
                                    StageOne = "MK25EVO",
                                    StageTwo = "S600"
                                },
                                new
                                {
                                    ProductId = 10,
                                    Octopus = "R095",
                                    StageOne = "MK17EVO",
                                    StageTwo = "C370"
                                },
                                new
                                {
                                    ProductId = 11,
                                    Octopus = "S270",
                                    StageOne = "MK25EVO BT",
                                    StageTwo = "A700 Carbon BT"
                                });
                        });

                    b.Navigation("BCD");

                    b.Navigation("DivingSuit");

                    b.Navigation("Fins");

                    b.Navigation("MaskSnorkel");

                    b.Navigation("OxygenTank");

                    b.Navigation("Regulator");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DiveDeep.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DiveDeep.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiveDeep.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DiveDeep.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiveDeep.Models.ApplicationUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DiveDeep.Models.Order", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
